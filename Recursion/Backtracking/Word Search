/*
 * https://leetcode.com/problems/word-search/
 * Given an m x n grid of characters board and a string word, return true if word exists in the grid.

The word can be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. 
The same letter cell may not be used more than once.

Input: board = [["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]], word = "ABCCED"
Output: true
 */
 class Solution {
    public boolean exist(char[][] board, String word) {
        // get row and column
        int row = board.length;
        int col = board[0].length;
        
        // create boolean array for tracking visted cell
        boolean[][] visited = new boolean[row][col];
        
        // loop through each cell
        for(int i = 0; i < row; i++){
            for(int j = 0; j < col; j++){
                if(board[i][j] == word.charAt(0) && search(board, i, j, 0, word, visited)){
                    return true;
                }
            }
        }
        return false;
    }
    
    private boolean search(char[][]board, int i, int j, int pos, String word, boolean[][] visited) {
        // base condition
        if(pos == word.length()-1){
            return true;
        }
              
        // mark the cell as visited
        visited[i][j] = true;
        
        // up movement
        if(i > 0 && board[i-1][j] == word.charAt(pos+1) && !visited[i-1][j]
           && search(board,i-1,j,pos+1,word,visited)) {
            return true;
        }
        
        // down movement
        if(i < board.length-1 && board[i+1][j] == word.charAt(pos+1) && !visited[i+1][j]
           && search(board,i+1,j,pos+1,word,visited)) {
            return true;
        }
        
        // left movement
        if(j > 0 && board[i][j-1] == word.charAt(pos+1) && !visited[i][j-1]
           && search(board,i,j-1,pos+1,word,visited)) {
            return true;
        }
        
        // right movement
        if(j < board[0].length-1 && board[i][j+1] == word.charAt(pos+1) && !visited[i][j+1]
           && search(board,i,j+1,pos+1,word,visited) ) {
            return true;
        }
        
        // marked the cell as non-visited
        visited[i][j] = false;
        return false;
    }
}
