// Given the array nums after the possible rotation and an integer target, return the index of target if it is in nums, or -1 if it is not in nums.
// https://leetcode.com/problems/search-in-rotated-sorted-array/

/*
 * Given the array nums after the possible rotation and an integer target, 
 * return the index of target if it is in nums, or -1 if it is not in nums.
 */
public class RotationBS {
	
	public int findPivot(int[] arr, int target) {
		int pivot = findPivotIndex(arr);
		if(pivot == -1) {
			// array is not rotated.Normal binary search
			return binarySearch(arr, target, 0, arr.length-1);
		}
		// pivot found condition handles here
		if(arr[pivot] == target) {
			return pivot;
		}
		// target < arr[pivot]
		if(target >= arr[0]) {
			return binarySearch(arr, target, 0, pivot-1);
		} else {
			return binarySearch(arr, target, pivot + 1, arr.length-1);
		}
	}

	private int binarySearch(int[] arr, int target, int start, int end) {
		
		while(start <= end) {
			int mid = start + (end - start)/2;
			
			if (target < arr[mid]) {
				end = mid - 1;
			} else if (target > arr[mid]) {
				start = mid + 1;
			}else {
				return mid;
			}
		}
		return -1;
	}

	private int findPivotIndex(int[] arr) {

		int start = 0;
		int end = arr.length - 1;

		while (start <= end) {
			int mid = start + (end - start) / 2;

			// pivot element is the largest element
			// case 1 : when arr[mid] > arr[mid+1]
			if (mid < end && arr[mid] > arr[mid + 1]) {
				return mid;
			}
			// case 2 : when arr[mid] < arr[mid-1]
			if (mid > start && arr[mid] < arr[mid - 1]) {
				return mid - 1;
			}
			// case 3 : when arr[0] >= arr[mid]
			if (arr[0] >= arr[mid]) {
				end = mid - 1;
			}
			// case 4 : when arr[0] < arr[mid]
			if (arr[0] < arr[mid]) {
				start = mid + 1;
			}
		}
		// pivot element not found
		return -1;
	}
}

