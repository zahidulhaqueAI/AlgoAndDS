

/**
 https://leetcode.com/problems/linked-list-cycle-ii/
 Given the head of a linked list, return the node where the cycle begins. If there is no cycle, return null.

There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the next pointer. 
Internally, pos is used to denote the index of the node that tail's next pointer is connected to (0-indexed). It is -1 if there is no cycle.
 
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode detectCycle(ListNode head) {
        ListNode s = head;
        ListNode f = head;
        
        int len = 0;
        
        while(f != null && f.next != null) {
            s = s.next;
            f = f.next.next;
            
            if(s == f) {
               len = lengthCycle(s);
                break;
            }
        }
        if(len == 0){
            return null;
        }
        s = head;
        f = head;
        // move the node to length position
        while(len > 0){
            s = s.next;
            len--;
        }
        // move the node to point the meeting node
        while(f != s){
            f = f.next;
            s = s.next;
        }
        return s;
    }
    private int lengthCycle(ListNode head){
        ListNode s = head;
        ListNode f = head;
        
        while(f != null && f.next != null){
            s = s.next;
            f = f.next.next;
            
            if(s == f){
                int len = 0;
                ListNode temp = s;
                do {
                   temp = temp.next;
                   len++;
                }while(temp != s);
                return len;   
            }
        }
        return 0;
    }
}
